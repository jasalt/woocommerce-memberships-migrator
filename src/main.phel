(ns woocommerce-memberships-migrator\main
  (:require phel\pdo :as pdo)
  (:require phel\str :as str)
  (:require woocommerce-memberships-migrator\lib\wp :as wp))

(defmacro read-config
  "Read PHP constant or throw exception if not set.
   Supports default values for optional configs."
  [name & [default]]
  (let [php-const-symbol (symbol (str "php/" name))]
    `(if (php/defined ,name)
       ,php-const-symbol
       (or ,default
           (php/new \RuntimeException (str "PHP constant " ,name " is required but not defined."))))))

(def db-prefix (read-config "SOURCE_MYSQL_DB_PREFIX"))

(def db-connection-string (str "mysql:host=" (read-config "SOURCE_MYSQL_HOST")
                               ";dbname="  (read-config "SOURCE_MYSQL_DB_NAME")
                               ";charset=" (read-config "SOURCE_MYSQL_DB_CHARSET")))

(def remote-db
  (let [conn (pdo/connect db-connection-string
                          (read-config "SOURCE_MYSQL_USER")
                          (read-config "SOURCE_MYSQL_PASSWORD"))]
    (pdo/exec conn (str "SET NAMES " (read-config "SOURCE_MYSQL_DB_CHARSET")
                        " COLLATE "  (read-config "SOURCE_MYSQL_DB_COLLATION")))
    conn))

(def sql-customer-users
  (str "SELECT
    u.ID,
    u.user_login,
    u.user_pass,
    u.user_nicename,
    u.user_email,
    u.user_registered,
    u.display_name,
    JSON_OBJECTAGG(um.meta_key, um.meta_value) AS user_meta
FROM " db-prefix "_users u
JOIN " db-prefix "_usermeta um ON u.ID = um.user_id
WHERE u.ID IN (
    SELECT user_id
    FROM " db-prefix "_usermeta
    WHERE meta_key = '" db-prefix "_capabilities'
    AND meta_value LIKE '%\"customer\";b:1;%'
)
GROUP BY u.ID, u.user_login, u.user_email, u.user_registered, u.display_name
ORDER BY u.ID;"))

(defn get-source-customers []
  (let [customers (wp/pdo-fetch-all remote-db sql-customer-users)]
    customers))

(def source-customers (get-source-customers))

(defn standardize-keys
  "When using custom database prefix, convert keys use standard `wp` prefix instead of it.
  E.g. `myprefix_capabilities` becomes `wp_capabilities`.
  If using standard prefix, nothing is done."
  [m]
  (if (= "wp" db-prefix)
    m
    (for [[k v] :pairs m :reduce [m {}]]
      (put m (if (str/starts-with? k db-prefix)
               (str/replace-first k db-prefix "wp")
               k) v))))

(defn keywordize-keys
  "Converts map keys to keywords.
  Recursively converts nested maps and arrays."
  [m]
  (cond
    (hash-map? m)
    (let [res (transient {})]
      (foreach [k v m]
        (put res (keyword k) (keywordize-keys v)))
      (persistent res))

    (indexed-php-array? m)
    (let [res (transient [])]
      (foreach [v m]
        (push res (keywordize-keys v)))
      (persistent res))

    true m))

(defn deserialize-values [m]
  "Deserialize predefined meta key values stored as serialized PHP
   TODO keys should be user selectable, not hardcoded"
  (-> m
      (put :wp_capabilities (keywordize-keys (php->phel (php/unserialize (get m :wp_capabilities)))))
      (put :session_tokens (keywordize-keys (php->phel (php/unserialize (get m :session_tokens)))))
      (put :_wpcw_subs_expired_check (keywordize-keys (php->phel (php/unserialize (get m :_wpcw_subs_expired_check)))))
      )
  )

(defn substitute-all
  "Does string replacements according to the `substitutions` map such as {\"Ã¶\" \"ö\" \"Ã¤\" \"ä\"}."
  [s substitutions]
  (for [[from to] :pairs substitutions :reduce [string s]]
    (str/replace string from to)))

(defn de-mojibake-values
  "Brute force fix dual encoding problems of source database strings.
  TODO action user configurable, not hardcoded"
  [m]
  (let [substitutions {"Ã¶" "ö"
                       "Ã¤" "ä"}]
    (for [[k v] :pairs m :reduce [m {}]]
      (put m k (if (string? v)
                 (replace-all v substitutions)
                 v)))))

(comment
  (let [customer (first source-customers)]
    (-> (get customer :user_meta)
        (php/json_decode)
        (php/get_object_vars)
        (php->phel)
        (standardize-keys)
        (keywordize-keys)
        (deserialize-values)
        (de-mojibake-values)
        )
    )


  (count source-customers)

  ## (php->phel (php/get_object_vars (php/json_decode (get customer :user_meta))))

  ## discard unneeded keys during user creation

  )


## TODO Add PHP associative array mapping of membership plans (old->new) in wp-config.php

## (def posts (php/get_posts
##             (to-php-array {"post_type" "post"
##                            "numberposts" 2})))
